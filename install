#!/bin/bash

set -eu -o pipefail

if [[ "$(pwd)" != "$(realpath "$(dirname "${BASH_SOURCE[0]}")")" ]]; then
    cd "$(dirname "${BASH_SOURCE[0]}")"
    exec ./"$(basename "${BASH_SOURCE[0]}")" "$@" # to update BASH_SOURCE, etc.
fi

source vendor/getoptions.sh
source ./lib/common.bash

parser_definition() {
    setup ARG_INSTALL_MODULES help:usage -- "Usage: $0 [options]... [modules]..."
    msg -- "Options:"

    flag FLG_LIST_PROFILES --list-profiles -- "List available profiles"
    flag FLG_LIST_MODULES --list-modules -- "List available modules"
    flag FLG_LIST_INSTALLED --list-installed -- "list installed profiles or modules"
    flag FLG_DRY_RUN -n --dry-run -- "Dry run"
    param OPT_PROFILE -p --profile -- "Profile to install"
    param OPT_LOG_LEVEL -l --log-level -- "Log level"
    disp :usage -h --help
}

eval "$(getoptions parser_definition parse_args)"

show_default_profile() {
    if [[ "${REMOTE_CONTAINERS:-}" == true ]]; then
        echo "%devcontainer"
    else
        echo "%default"
    fi
}

contains_profile() {
    local module
    for module in "$@"; do
        if [[ "${module}" =~ ^% ]]; then
            return 0
        fi
    done
    return 1
}

install_main() {
    parse_args "$@"
    eval "ARG_INSTALL_MODULES=(${ARG_INSTALL_MODULES})"

    set_log_level "${OPT_LOG_LEVEL:-info}"
    set_dry_run "${FLG_DRY_RUN:-0}"

    if [[ "${FLG_LIST_PROFILES}" -eq 1 ]]; then
        list_available_profiles
        return 0
    fi

    if [[ "${FLG_LIST_MODULES}" -eq 1 ]]; then
        list_available_modules
        return 0
    fi

    if [[ "${FLG_LIST_INSTALLED}" -eq 1 ]]; then
        list_installed_profiles_or_modules
        return 0
    fi

    # install specifiled profiles /  modules
    local -a to_install+=()
    if [[ -n "${OPT_PROFILE}" ]]; then
        # if profile is specified, install modules specified by the profile
        info "install modules in profile: ${OPT_PROFILE}"
        to_install+=("%${OPT_PROFILE}")
    fi
    if [[ "${#ARG_INSTALL_MODULES[@]}" -gt 0 ]]; then
        info "install modules: ${ARG_INSTALL_MODULES[*]}"
        to_install+=("${ARG_INSTALL_MODULES[@]}")
    fi

    # update all installed profiles / modules
    local -a to_update
    readarray -t to_update < <(list_installed_profiles_or_modules)

    # if no profile to install / update, install default profile
    if ! contains_profile "${to_install[@]}" "${to_update[@]}"; then
        local default_profile
        default_profile="$(show_default_profile)"
        info "install modules in profile: ${default_profile}"
        to_install=("${default_profile}")
    fi

    # sort & remove duplicates
    readarray -t to_install < <(sort_uniq_args "${to_install[@]}")
    readarray -t to_update < <(sort_uniq_args "${to_update[@]}")

    # install / update
    info "installing ${#to_install[@]} profiles / modules..."
    install_profile_or_module "${to_install[@]}"

    info "updating ${#to_update[@]} profiles / modules..."
    update_profile_or_module "${to_update[@]}"

    info "done"
}

install_main "$@"
