#!/bin/bash

set -eu -o pipefail

if [[ "$(pwd)" != "$(realpath "$(dirname "${BASH_SOURCE[0]}")")" ]]; then
    cd "$(dirname "${BASH_SOURCE[0]}")"
    exec ./"$(basename "${BASH_SOURCE[0]}")" "$@" # to update BASH_SOURCE, etc.
fi
source ./lib/common.bash
is_executed && return

parse_args "$@"
eval "set -- ${REST_ARGS}"

typeset -a PROFILE_DEVCONTAINER=(
    bat
    curl
    delta
    git
    ripgrep
    skim
    starship
    tig
    vim
    zsh
)
readarray -t PROFILE_DEVCONTAINER < <(sort_uniq_args "${PROFILE_DEVCONTAINER[@]}")
typeset -a PROFILE_DEFAULT=(
    "${PROFILE_DEVCONTAINER[@]}"
    cargo_binstall
    cargo_update
    epel
    paru
    rhq
    rustup
    tmux
    topgrade
)
readarray -t PROFILE_DEFAULT < <(sort_uniq_args "${PROFILE_DEFAULT[@]}")
typeset -a PROFILE_FULL=(
    "${PROFILE_DEFAULT[@]}"
    emacs
    keychain
)
readarray -t PROFILE_FULL < <(sort_uniq_args "${PROFILE_FULL[@]}")

assert_eq "${PROFILE_FULL[*]}" "${AVAILABLE_MODULES[*]}"

install_main() {
    if [[ "${FLG_LIST_MODULES}" -eq 1 ]]; then
        for module in "${AVAILABLE_MODULES[@]}"; do
            echo "${module}"
        done
        return 0
    fi

    if [[ "${FLG_LIST_INSTALLED}" -eq 1 ]]; then
        for module in "${INSTALLED_MODULES[@]}"; do
            echo "${module}"
        done
        return 0
    fi

    # install modules specified by arguments
    local -a install_modules=("$@")

    # if profile is specified, install modules specified by the profile
    case "${OPT_PROFILE}" in
    devcontainer)
        install_modules+=("${PROFILE_DEVCONTAINER[@]}")
        ;;
    default)
        install_modules+=("${PROFILE_DEFAULT[@]}")
        ;;
    full)
        install_modules+=("${PROFILE_FULL[@]}")
        ;;
    none)
        install_modules+=()
        ;;
    "")
        if [[ "${#install_modules[@]}" -gt 0 ]]; then
            # if modules are specified, install only them
            :
        elif [[ "${#INSTALLED_MODULES[@]}" -gt 0 ]]; then
            # if no modules are specified, and some modules are installed, re-install them
            info "Update installed modules"
            install_modules=("${INSTALLED_MODULES[@]}")
        else
            # if no modules are specified, and no modules are installed, install modules in the default profile
            if [[ "${REMOTE_CONTAINERS:-}" == true ]]; then
                OPT_PROFILE=devcontainer
                install_modules=("${PROFILE_DEVCONTAINER[@]}")
            else
                OPT_PROFILE=default
                install_modules=("${PROFILE_DEFAULT[@]}")
            fi
        fi
        ;;
    *)
        error "Unknown profile: ${OPT_PROFILE}"
        return 1
        ;;
    esac

    if [[ -n "${OPT_PROFILE}" ]]; then
        info "Profile: ${OPT_PROFILE}"
    fi

    # update all installed modules
    install_modules+=("${INSTALLED_MODULES[@]}")

    # deduplicate and sort modules
    readarray -t install_modules < <(sort_uniq_args "${install_modules[@]}")

    # install each modules
    local module
    for module in "${install_modules[@]}"; do
        if [[ "${FLG_DRY_RUN}" -eq 1 ]]; then
            info "Would install module: ${module}"
        else
            install_module "${module}"
        fi
    done
}

group_start_file
install_main "$@"
group_end
