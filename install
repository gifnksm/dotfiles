#!/bin/bash

set -eu -o pipefail

if [[ "$(pwd)" != "$(realpath "$(dirname "${BASH_SOURCE[0]}")")" ]]; then
    cd "$(dirname "${BASH_SOURCE[0]}")"
    exec ./"$(basename "${BASH_SOURCE[0]}")" "$@" # to update BASH_SOURCE, etc.
fi
source ./lib/common.bash
is_executed && return

parse_args "$@"
eval "set -- ${REST_ARGS}"

if [[ "${FLG_DRY_RUN}" -eq 1 ]]; then
    set_dry_run true
else
    set_dry_run false
fi

show_default_profile() {
    if [[ "${REMOTE_CONTAINERS:-}" == true ]]; then
        echo "%devcontainer"
    else
        echo "%default"
    fi
}

install_main() {
    if [[ "${FLG_LIST_PROFILES}" -eq 1 ]]; then
        list_available_profiles
        return 0
    fi

    if [[ "${FLG_LIST_MODULES}" -eq 1 ]]; then
        list_available_modules
        return 0
    fi

    if [[ "${FLG_LIST_INSTALLED}" -eq 1 ]]; then
        list_installed_profiles_or_modules
        return 0
    fi

    # install specifiled modules
    local -a to_install=("$@")
    if [[ -n "${OPT_PROFILE}" ]]; then
        # if profile is specified, install modules specified by the profile
        to_install+=("%${OPT_PROFILE}")
    fi

    # update all installed modules / profiles
    local -a to_update
    readarray -t to_update < <(list_installed_profiles_or_modules)

    # if nothing to install / update, install default profile
    if [[ "${#to_install[@]}" -eq 0 && "${#to_update[@]}" -eq 0 ]]; then
        to_install=("$(show_default_profile)")
    fi

    # sort & remove duplicates
    readarray -t to_install < <(sort_uniq_args "${to_install[@]}")
    readarray -t to_update < <(sort_uniq_args "${to_update[@]}")

    # install / update
    install_profile_or_module "${to_install[@]}"
    update_profile_or_module "${to_update[@]}"
}

group_start_file
install_main "$@"
group_end
