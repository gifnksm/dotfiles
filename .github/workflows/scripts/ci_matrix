#!/bin/bash

set -euo pipefail

cd "$(dirname "${BASH_SOURCE[0]}")/../../.."

pretty_os() {
    case "${1}" in
    arch) echo "arch" ;;
    ubuntu_22_04) echo "ubuntu-22.04" ;;
    debian_12) echo "debian-12" ;;
    rocky_9) echo "rocky-9" ;;
    *) echo "${1}" ;;
    esac
}

declare -a os_list=(arch ubuntu_22_04 debian_12 rocky_9)

declare first_entry=true
dump_entry() {
    local -r name="$1"
    local -r command="$2"
    if [[ "${first_entry}" = true ]]; then
        first_entry=false
    else
        echo ","
    fi
    jq --null-input --arg name "${name}" --arg command "${command}" '{ name: $name, command: $command }'
}

dump_os_entries() {
    local -r base_name="${1}"
    local -r test_file="${2}"
    local -r rest_args="${3:-}"

    local name command
    for os in "${os_list[@]}"; do
        command=("./${test_file}" "${os}")
        if [[ -n "${rest_args}" ]]; then
            command+=("${rest_args}")
        fi

        dump_entry "${base_name} - $(pretty_os "${os}")" "${command[*]}"
    done
}

main() {
    local -a test_files
    readarray -t test_files < <(find test -type f -executable -name 'test_*' | sort)

    local -a profiles=()
    readarray -t profiles < <(./install --list-profiles)
    local -a modules=()
    readarray -t modules < <(./install --list-modules)

    if [[ "${#profiles[@]}" -eq 0 ]]; then
        echo "profiles not found" >&2
        exit 1
    fi

    if [[ "${#modules[@]}" -eq 0 ]]; then
        echo "modules not found" >&2
        exit 1
    fi

    {
        echo '['
        local test_file
        for test_file in "${test_files[@]}"; do
            local name
            name="$(basename "${test_file}")"
            name="${name##test_}"

            case "${name}" in
            install_normal)
                local profile
                for profile in "${profiles[@]}"; do
                    dump_os_entries "install [normal] %${profile}" "${test_file}" "--profile ${profile}"
                done
                local module
                for module in "${modules[@]}"; do
                    dump_os_entries "install [normal] ${module}" "${test_file}" "${module} --profile none"
                done
                ;;
            install_dry_run)
                dump_os_entries "install [dry-run] %full" "${test_file}" "--profile full"
                ;;
            bootstrap)
                dump_os_entries "bootstrap" "${test_file}"
                ;;
            *)
                dump_entry "${name}" "./${test_file}"
                ;;
            esac
        done
        echo ']'
    } | jq --compact-output 'sort_by(.name)'
}

main "$@"
